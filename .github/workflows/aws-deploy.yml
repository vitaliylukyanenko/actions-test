on:
  workflow_dispatch:
    inputs:
      ENV:
        description: 'ENV name Prod/Dev'     
        required: true
        default: 'Dev'
        
name: Nginx test deployment


jobs:   
  printInputs:
    runs-on: ubuntu-latest
    steps:
    - run: |
        echo "Environment name: ${{ github.event.inputs.ENV }}"
        echo "Kubeconfig: ${{ secrets.KUBECONFIG }}" 
        
  ci:
    name: Build
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}
        ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
      
  deployment:
    name: Kubernetes deploy
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.ENV }}
    steps:
      - uses: actions/checkout@v1
      - name: Prep helm chart
        run: |
          mv ./.helm/app/Chart.yaml ./.helm/app/Chart.old.yaml &&
          cat ./.helm/app/Chart.old.yaml | grep -v appVersion > ./.helm/app/Chart.yaml &&
          echo -e "\r\nappVersion: v${GITHUB_REF##*/}\r\n" >> ./.helm/app/Chart.yaml &&
          cat ./.helm/app/Chart.yaml
        
      - name: Deploy
        uses: WyriHaximus/github-action-helm3@v2
        with:
          exec: helm upgrade nginx-test ./.helm/app/ --install --wait --atomic --namespace=default --set=app.name=nginx-test --values=./.helm/app/values.yaml --set=image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          kubeconfig: '${{ secrets.KUBECONFIG }}'
